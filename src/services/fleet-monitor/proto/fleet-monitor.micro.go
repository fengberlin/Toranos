// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: fleet-monitor.proto

/*
Package fleet_monitor is a generated protocol buffer package.

It is generated from these files:
	fleet-monitor.proto

It has these top-level messages:
	Empty
	AvailableVehiclesResponse
*/
package fleet_monitor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FleetMonitor service

type FleetMonitorService interface {
	AvailableVehicles(ctx context.Context, in *Empty, opts ...client.CallOption) (*AvailableVehiclesResponse, error)
}

type fleetMonitorService struct {
	c    client.Client
	name string
}

func NewFleetMonitorService(name string, c client.Client) FleetMonitorService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "fleetmonitor"
	}
	return &fleetMonitorService{
		c:    c,
		name: name,
	}
}

func (c *fleetMonitorService) AvailableVehicles(ctx context.Context, in *Empty, opts ...client.CallOption) (*AvailableVehiclesResponse, error) {
	req := c.c.NewRequest(c.name, "FleetMonitor.AvailableVehicles", in)
	out := new(AvailableVehiclesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FleetMonitor service

type FleetMonitorHandler interface {
	AvailableVehicles(context.Context, *Empty, *AvailableVehiclesResponse) error
}

func RegisterFleetMonitorHandler(s server.Server, hdlr FleetMonitorHandler, opts ...server.HandlerOption) {
	type fleetMonitor interface {
		AvailableVehicles(ctx context.Context, in *Empty, out *AvailableVehiclesResponse) error
	}
	type FleetMonitor struct {
		fleetMonitor
	}
	h := &fleetMonitorHandler{hdlr}
	s.Handle(s.NewHandler(&FleetMonitor{h}, opts...))
}

type fleetMonitorHandler struct {
	FleetMonitorHandler
}

func (h *fleetMonitorHandler) AvailableVehicles(ctx context.Context, in *Empty, out *AvailableVehiclesResponse) error {
	return h.FleetMonitorHandler.AvailableVehicles(ctx, in, out)
}
