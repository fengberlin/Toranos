// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user-management.proto

/*
Package user_management is a generated protocol buffer package.

It is generated from these files:
	user-management.proto

It has these top-level messages:
	RegisterUserRequest
	RegisterUserResponse
	IssueUserTokenRequest
	IssueUserTokenResponse
	AuthenticateUserRequest
	AuthenticateUserResponse
*/
package user_management

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserManagement service

type UserManagementService interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...client.CallOption) (*RegisterUserResponse, error)
	IssueUserToken(ctx context.Context, in *IssueUserTokenRequest, opts ...client.CallOption) (*IssueUserTokenResponse, error)
	AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...client.CallOption) (*AuthenticateUserResponse, error)
}

type userManagementService struct {
	c    client.Client
	name string
}

func NewUserManagementService(name string, c client.Client) UserManagementService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "usermanagement"
	}
	return &userManagementService{
		c:    c,
		name: name,
	}
}

func (c *userManagementService) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...client.CallOption) (*RegisterUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserManagement.RegisterUser", in)
	out := new(RegisterUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementService) IssueUserToken(ctx context.Context, in *IssueUserTokenRequest, opts ...client.CallOption) (*IssueUserTokenResponse, error) {
	req := c.c.NewRequest(c.name, "UserManagement.IssueUserToken", in)
	out := new(IssueUserTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementService) AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...client.CallOption) (*AuthenticateUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserManagement.AuthenticateUser", in)
	out := new(AuthenticateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserManagement service

type UserManagementHandler interface {
	RegisterUser(context.Context, *RegisterUserRequest, *RegisterUserResponse) error
	IssueUserToken(context.Context, *IssueUserTokenRequest, *IssueUserTokenResponse) error
	AuthenticateUser(context.Context, *AuthenticateUserRequest, *AuthenticateUserResponse) error
}

func RegisterUserManagementHandler(s server.Server, hdlr UserManagementHandler, opts ...server.HandlerOption) {
	type userManagement interface {
		RegisterUser(ctx context.Context, in *RegisterUserRequest, out *RegisterUserResponse) error
		IssueUserToken(ctx context.Context, in *IssueUserTokenRequest, out *IssueUserTokenResponse) error
		AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, out *AuthenticateUserResponse) error
	}
	type UserManagement struct {
		userManagement
	}
	h := &userManagementHandler{hdlr}
	s.Handle(s.NewHandler(&UserManagement{h}, opts...))
}

type userManagementHandler struct {
	UserManagementHandler
}

func (h *userManagementHandler) RegisterUser(ctx context.Context, in *RegisterUserRequest, out *RegisterUserResponse) error {
	return h.UserManagementHandler.RegisterUser(ctx, in, out)
}

func (h *userManagementHandler) IssueUserToken(ctx context.Context, in *IssueUserTokenRequest, out *IssueUserTokenResponse) error {
	return h.UserManagementHandler.IssueUserToken(ctx, in, out)
}

func (h *userManagementHandler) AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, out *AuthenticateUserResponse) error {
	return h.UserManagementHandler.AuthenticateUser(ctx, in, out)
}
